apiVersion: v1
kind: Secret
metadata:
  name: sql-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
type: Opaque
data:
  dump.sql: 