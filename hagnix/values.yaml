# Default values for hagnix.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

#types of Cloud supported GKE and Local
#Disk necessary: mysql-disk and mongo-disk
cloud: "Local"
deploy: "production"

nginx-ingress:
  controller:
    name: controller
    image:
      repository: quay.io/kubernetes-ingress-controller/nginx-ingress-controller-amd64
      tag: "0.17.0"
      pullPolicy: IfNotPresent

  tcp: {
    81: "hagnix/rotmgserver:81",
    2050: "hagnix/rotmgwserver:2050",
    3000: "hagnix/nodeback:3000",
    82: "hagnix/hagnix-grafana:80",
    83: "hagnix/hagnix-prometheus-server:9090"
  }

backend:
  credentials:
    create_default: true

  node: # hagnix/nodeback
    #image: gcr.io/white-script-214013/hagnix/nodeback
    image: dangerousplay/hagnix-nodeback:latest
    port: 3000
    replicas: 1
    cors_origin: "http://localhost:4200"
    autoscaling:
      use: true
      minReplicas: 1
      maxReplicas: 10
  mysql:
    port: 3306
    image: percona:5.6
    database: rotmgprod
    user: dangerous
    host: mysql
  redis:
    port: 6379
    host: redis
    image: bitnami/redis:4.0
  mongodb:
    image: bitnami/mongodb:4.1
    root: root
    host: mongodb
    database: production
    port: 27017
  rotmgserver:
    replicas: 1
    #image: gcr.io/white-script-214013/hagnix/server
    image: dangerousplay/hagnix-server
    port: 81
    autoscaling:
      use: true
      minReplicas: 1
      maxReplicas: 3
    disableRegister: true
    config:
       configMap: "server-config"
       'server.cfg': "I1NlcnZlckNvbmZpZwpwb3J0OjgwCnZlcmlmeUVtYWlsOmZhbHNlCnNlcnZlckRvbWFpbjpodHRwOi8vYzQ1My5wdwojc2VydmVyRW1haWw6CiNzZXJ2ZXJFbWFpbFBhc3N3b3JkOgojc210cEhvc3Q6CiNzbXRwUG9ydDoKIwojRGF0YWJhc2UgQ29uZmlnCiMKZGJfaG9zdDoxMjcuMC4wLjEKZGJfZGF0YWJhc2U6cm90bWdwcm9kCmRiX3VzZXI6cm9vdApkYl9hdXRoOnJvb3QKIwojU2VydmVycwojCnN2ck51bToyCiNzdnIwTmFtZTpUZXN0aW5nIFNlcnZlcgojc3ZyMEFkcjo2OS4xNDAuMS4yMDMKI3N2cjBMb2NhdGlvbjpBcmxpbmd0b24sIFZpcmdpbmlhLCBVU0EKc3ZyME5hbWU6TG9jYWxob3N0CnN2cjBBZHI6MTI3LjAuMC4xCnN2cjBMb2NhdGlvbjpBcmxpbmd0b24sIFZpcmdpbmlhLCBVU0EKc3ZyMU5hbWU6SGFnbml4MwpzdnIxQWRyOjM1LjIyNC4xNzcuMTUzCg=="
  rotmgwserver:
    port: 2050
    replicas: 1
    #image: gcr.io/white-script-214013/hagnix/wserver
    image: dangerousplay/hagnix-wserver
    whitelist: true

frontend:
  angular:



prometheus:
  rbac:
    create: true

  nodeExporter:
    image:
      repository: prom/node-exporter
      tag: v0.15.2

grafana:
  rbac:
    create: true
    pspEnabled: false
  serviceAccount:
    create: false

  replicas: 1

  deploymentStrategy: RollingUpdate

  image:
    repository: grafana/grafana
    tag: latest
    pullPolicy: IfNotPresent

    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName

  downloadDashboardsImage:
    repository: appropriate/curl
    tag: latest
    pullPolicy: IfNotPresent

  ## Pod Annotations
  # podAnnotations: {}

  ## Deployment annotations
  # annotations: {}

  ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx-internal
      kubernetes.io/tls-acme: "false"
    labels: {}
    path: /
    hosts:
      - grafana.demo.devops.bot
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: false
    storageClassName: hostpath
    accessModes:
    - ReadWriteOnce
    size: 2Gi
    annotations: {}
    subPath: ""
    existingClaim: false

  adminUser: admin
  adminPassword: strongpassword

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  ## Extra environment variables that will be pass onto deployment pods
  env: {}

  ## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
  ## This can be useful for auth tokens, etc
  envFromSecret: ""

  ## Additional grafana server secret mounts
  # Defines additional mounts with secrets. Secrets must be manually created in the namespace.
  extraSecretMounts: []
    # - name: secret-files
    #   mountPath: /etc/secrets
  #   secretName: grafana-secret-files
  #   readOnly: true

  # Pass the plugins you want installed as a comma separated list.
  # plugins: "digrich-bubblechart-panel,grafana-clock-panel"
  plugins: "grafana-kubernetes-app,percona-percona-app"

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://hagnix-prometheus-server
          access: proxy
          isDefault: true

  ## Configure grafana dashboard providers
  ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
  ##
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards

  ## Configure grafana dashboard to import
  ## NOTE: To use dashboards you must also enable/configure dashboardProviders
  ## ref: https://grafana.com/dashboards
  ##
  dashboards:
    #  some-dashboard:
    #    json: |
    #      $RAW_JSON
    prometheus-stats:
      gnetId: 2
      revision: 2
      datasource: Prometheus
    kubernetes-cluster-monitoring:
      gnetId: 1621
      revision: 1
      datasource: Prometheus
    kubernetes-resource-requests:
      gnetId: 7187
      revision: 1
      datasource: Prometheus
    kubernetes-capacity:
      gnetId: 5309
      revision: 1
      datasource: Prometheus
    kubernetes-pods:
      gnetId: 6336
      revision: 1
      datasource: Prometheus
    kubernetes-cluster:
      gnetId: 6417
      revision: 1
      datasource: Prometheus
    # https://github.com/kubernetes/ingress-nginx/tree/master/deploy/grafana/dashboards
    nginx-ingress:
      url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.yaml
      datasource: Prometheus
  #  local-dashboard:
  #    url: https://example.com/repository/test.json

  ## Grafana's primary configuration
  ## NOTE: values in map will be converted to ini format
  ## ref: http://docs.grafana.org/installation/configuration/
  ##
  grafana.ini:
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
    analytics:
      check_for_updates: true
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    ## LDAP Authentication can be enabled with the following values on grafana.ini
    ## NOTE: Grafana will fail to start if the value for ldap.toml is invalid
    # auth.ldap:
    #   enabled: true
    #   allow_sign_up: true
    #   config_file: /etc/grafana/ldap.toml

  ## Grafana's LDAP configuration
  ## Templated by the template in _helpers.tpl
  ## NOTE: To enable the grafana.ini must be configured with auth.ldap.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#auth-ldap
  ## ref: http://docs.grafana.org/installation/ldap/#configuration
  ldap:
    # `existingSecret` is a reference to an existing secret containing the ldap configuration
    # for Grafana in a key `ldap-toml`.
    existingSecret: ""
    # `config` is the content of `ldap.toml` that will be stored in the created secret
    config: ""
    # config: |-
    #   verbose_logging = true

    #   [[servers]]
    #   host = "my-ldap-server"
    #   port = 636
    #   use_ssl = true
    #   start_tls = false
    #   ssl_skip_verify = false
    #   bind_dn = "uid=%s,ou=users,dc=myorg,dc=com"

  ## Grafana's SMTP configuration
  ## NOTE: To enable, grafana.ini must be configured with smtp.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#smtp
  smtp:
    # `existingSecret` is a reference to an existing secret containing the smtp configuration
    # for Grafana in keys `user` and `password`.
    existingSecret: ""